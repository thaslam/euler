package tomhaslam.euler.code;

import java.util.ArrayList;

public class Problem0002 extends Problem {
	/*
	Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
	0,1,2,3
	0+1 = 1 (0,1) (1,1)
	1+1 = 2 (1,1) (1,2)
	1+2 = 3 (1,2) (2,3)
	3+2 = 5 (2,3) (3,5)
	5+3 = 8 (3,5) (5,8)
	5+8 = 13
	8+13 = 21
	21=13 = 34
	 */
	public long solve(int max)
	{
		int lastSum = 0;
		int runningSum = 1;
		ArrayList<Integer> evens = new ArrayList<Integer>();
			
		while(runningSum <= max)
		{
			if (runningSum % 2 == 0) evens.add(runningSum);
				
			runningSum = lastSum + runningSum;
			lastSum = runningSum - lastSum;
		}
			
		int sum = 0;
		for (int i : evens) sum += i;
			
		return sum;
	}
}
